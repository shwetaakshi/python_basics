# -*- coding: utf-8 -*-
"""python_basics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VCttxtqxxj-oDP2LgJzZjSgJlL_nM2UG
"""

from typing import overload
name = "Baeu";print(name)
name = "Baeu"
print(type(name) == str)
name = "Beau"
print(isinstance(name, str))
age =2
print(isinstance(age, int))
age =2
print(isinstance(age, float))
age = 2.9
print(isinstance(age, float))
age = float(2)
print(isinstance(age,float))
age = "20"
print(isinstance(age, int))
age = int("20")
print(isinstance(age, int))
number ="20"
age = int(number)
print(isinstance(age, int))
1 + -1 #0
2 - 1 #1
2 * 2 #4
4 / 2 #2
4 % 3 #1
4 ** 2 #16
5 // 2 #2
print("Scamp" + " is a good dog")
age = 8
age *= 8 # age = age * 8
print(age)
a = 1
b = 2
a == b #False
a != b #True
a > b #False
a <= b #True
condition1 = True
condition2 = False
not condition1 #False
condition1 and condition2 #False
condition1 or condition2 #True
print( 0 or 1 ) ## 1
print(False or 'hey') ## 'hey'
print('hi' or 'hey') ## 'hi'
print( [] or False) ## 'False'
print(False or []) ## '[]'

print( 0 and 1 ) ## 0
print( 1 and 0 ) ## 0
print(False and 'hey') ## 'False'
print('hi' and 'hey') ## 'hey'
print( [] and False) ## []
print(False and []) ## False

def is_adult(age):
    if age > 18:
         return True
    else:
             return False
def is_adult2(age):
          return True if age > 18 else False
name = "Beau"
name += " is my name"
print(name)
print ("""Beau is
39
 years old
 """)
print("beau".upper())
print("bEAU".lower())
print("bEAu person".title())
print("bEAU person".islower())
print("person".islower())
name = "Beau"
print(name.lower())
print(name)
name = "Beau"
print("au" in name)
name = 'Be"au'
print(name)
name = "Be\"au"
print(name)
name = 'Be"\'au'
print(name)
name = 'Be\nau'
print(name)
name = 'Be\\au'
print(name)
name = 'Beau'
print(name[1])
print(name[0])
print(name[-1])
print(name[1:2])
print(name[1:3])
name = 'Beau is cool'
print(name[5:])
print(name[:7])

done = True
if done:
   print("yes")
else:
    print("no")
done = False
if done:
   print("yes")
else:
    print("no")
done = 0
if done:
   print("yes")
else:
    print("no")
done = -1
if done:
   print("yes")
else:
    print("no")
done = "Beau"
if done:
   print("yes")
else:
    print("no")
done = ""
if done:
   print("yes")
else:
    print("no")
done = True
print(type(done) == bool)
if done:
  print("yes")
else:
  print("no")
done = "beau"
print(type(done) == bool)
if done:
  print("yes")
else:
  print("no")
book_1_read = True
book_2_read = False
read_any_book = any([book_1_read, book_2_read])
ingredients_purchased = True
meal_cooked = False
ready_to_serve = all([ingredients_purchased, meal_cooked])
num1 = 2+3j
num2 = complex(2,3)
print(num2.real, num2.imag)
print(abs(-5.5))
print(round(5.5))
print(round(5.49))
print(round(5.49, 1))

from enum import Enum
class State(Enum):
   INACTIVE = 0
   ACTIVE = 1
print(State.ACTIVE.value)

from enum import Enum
class State(Enum):
   INACTIVE = 0
   ACTIVE = 1
print(State(1))
from enum import Enum
class State(Enum):
   INACTIVE = 0
   ACTIVE = 1
print(State['ACTIVE'])
from enum import Enum
class State(Enum):
   INACTIVE = 0
   ACTIVE = 1
print(list(State))
from enum import Enum
class State(Enum):
   INACTIVE = 0
   ACTIVE = 1
print(len(State))
age = input()
print("Your age is " + age)

print("What is your age?")
age = input()
print("Your age is " + age)
age = input("What is your age?")
print("Your age is " + age)

condition = True
if condition == True:
  print("The condition")
  print("was true")

condition = False
name = "Flavio"
if condition == True:
   print("The conditon")
   print("was true")
elif name == "Roger":
    print("Hello Roger")
elif name == "Syd":
     print("Hello Syd")
elif name == "Flavio":
     print("Hello Flavio")
else:
  print("The condition")
  print("was false")

dogs = ["Roger", 1, "Syd", True, "Quincy", 7]
print("Roger" in dogs)
print("Beau" in dogs)
print(dogs[2])
dogs[2] = "Beau"
print(dogs)
print(dogs[2:4])
print(dogs[2:])
print(dogs[:3])
print(len(dogs))
dogs.append("Judah")
print(dogs)
dogs.extend(["Judah", 5])
print(dogs)
dogs += ["Shweta", 5]
print(dogs)
dogs.remove("Quincy")
print(dogs)
print(dogs.pop())
print(dogs)

items  = ["Roger", 1, "Syd", True, "Quincy", 7]
items.insert(2, "Test")
print(items)
items[1:1] = ["Test1", "Test2"]
print(items)
items  = ["Roger", "Syd", "beau", "Beau", "Quincy"]
items.sort()
print(items)
items.sort(key=str.lower)
print(items)
items  = ["Roger", "Syd", "beau", "Beau", "Quincy"]
print(sorted(items,
             key=str.lower))
print(items)
#Tuples
names = ("Roger", "Syd", "Beau")
names[-1]
names.index("Roger")
print(len(names))
print("Roger" in names)
print(sorted(names))
newTuple = names + ("Tina", "Quincy")

dog = { "name": "Roger", "age": 8 }
print(dog['name'])
print(dog.get("name"))
dog = { "name": "Roger", "age": 8 }
dog["name"] = "Syd"
print(dog)
print(dog.get("color"))
print(dog.get("color" , "brown"))
dog = { "name": "Roger", "age": 8 , "color": "green"}
print(dog.get("color" , "brown"))
dog = { "name": "Roger", "age": 8 , "color": "green"}
print(dog.pop("name"))
print(dog)
print(dog.popitem())
print(dog)
print("color" in dog)
print(dog.keys())
print(list(dog.keys()))
print(dog.values())
print(list(dog.items()))
dog = { "name": "Roger", "age": 8 , "color": "green"}
dog["favorite food"] = "meat"
print(dog)
del dog['color']
dogCopy = dog.copy()
print(dog)

set1 = {"Roger", "Syd"}
set2 = {"Roger"}
intersect = set1 & set2
print(intersect)
mod = set1 | set2
print(mod)
set1 = {"Roger", "Syd"}
set2 = {"Luna"}
mod = set1 | set2
print(mod)
set1 = {"Roger", "Syd"}
set2 = {"Roger"}
mod = set1 - set2
print(mod)
mod = set1 > set2
print(mod)
mod = set1 < set2
print(mod)
set1 = {"Roger", "Syd"}
set2 = {"Roger"}
print(list(set1))

def hello():
   print('Hello!')
hello()
hello()
def hello(name):
   print('Hello' + name)
hello("Beau")
hello("Quincy")
def hello(name =" my friend"):
   print("Hello" + name)
hello()
def hello(name, age):
  print("Hello" + name + " you are" +  str(age) + " years old!")
hello("Beau", 39)
def change(value):
   value = 2
val = 1
change(val)
print(val)
def change(value):
   value["name"] = "Syd"
val = {"name" : "beau"}
change(val)
print(val)
def hello(name):
  if not name:
      return
  print('Hello' + name + '!')
hello("Beau")
def hello(name):
  print('Hello' + name + '!')
  return name, "Beau", 8
print(hello("Syd"))
age = 8
def test():
  print(age)
print(age) # 8
test() # 8

def talk(phrase):
  def say(word):
    print(word)

  words = phrase.split( ' ' )
  for word in words:
    say(word)
talk('I am goin to buy the milk')

def count():
    count = 0
    def increment():
        nonlocal count
        count = count + 1
        print(count)
    increment()
count()
def count():
    count = 0
    def increment():
         nonlocal count
         count = count + 1
         return count
         increment = counter()
         print(increment()) # 1
         print(increment()) # 2
         print(increment()) # 3

age = 8
print(age.real)
print(age.imag)
print(age.bit_length())
items = [1, 2]
items.append(3)
items.pop()
print(id(items))

condition = True
while condition == True:
   print("The condition is True")
   condition = False
count = 0
while count < 10:
  print("The condition is True")
  count = count + 1
print("After the loop")
items = [1, 2, 3, 4]
for item in items:
  print(item)

for item in range(15):
  print(item)
items = [1, 2, 3, 4]
for index, item in enumerate(items):
    print(index, item)
items = ["beau", "syd", "quincy"]
for index, item in enumerate(items):
    print(index, item)
item = [1, 2, 3, 4]
for item in items:
   if item == 2:
       continue
       print(item)
item = [1, 2, 3, 4]
for item in items:
    if item == 2:
       break
    print(item)
class Dog:
   def bark(self):
       print("woof!")
roger = Dog()
print(type(roger))
class Dog:
   def __init__(self, name, age):
         self.name = name
         self.age = age
   def bark(self):
      print("woof!")
roger = Dog("Roger", 8)
print(roger.name)
print(roger.age)
roger.bark()

class Animal:
  def walk(self):
      print("Walking....")
class Dog(Animal):
  def __init__(self, name, age):
      self.name = name
      self.age = age
  def bark(self):
     print("woof!")
roger = Dog("Roger", 8)
print(roger.name)
print(roger.age)
roger.bark()
roger.walk()

import math
print(math.sqrt(4))

import sys
name = sys.argv[1]
print("Hello " + name)

lambda num : num * 2
multiply = lambda a, b : a * b
print(multiply(2,4))

numbers = [1, 2, 3]
def double(a):
    return a * 2
result = map(double, numbers)
print(result)
numbers = [1, 2, 3]
def double(a):
    return a * 2
result = map(double, numbers)
print(list(result))

numbers = [1, 2, 3, 4, 5, 6]
result = filter(lambda n : n % 2  == 0, numbers)
print(list(result))

expeenses = [
    ('Dinner', 80),
    ('Car repair', 120)
]
sum = 0
for expense in expeenses:
  sum += expense[1]
print(sum)
from functools import reduce
expenses = [
    ('Dinner', 80),
    ('Car repair', 120)
]
sum = reduce(lambda a, b: a[1] + b[1], expenses)
print(sum)

def factorial(n):
     if n == 1: return 1
     return n * factorial(n-1)
print(factorial(3))
print(factorial(4))
print(factorial(5))
def logtime(func):
    def wrapper():
        print("before")
        val = func()
        print("after")
        return val
    return wrapper
@logtime
def hello():
    print("hello")
hello()

def increment(n):
    """Increment a number"""
    return n + 1
"""Dog module
This module does ... bla bla bla and provides the following classes:
- Dog
...
"""
class Dog:
  """A class representing a dog"""
  def __init__(self, name, age):
      """Initialize a new dog"""
      self.name = name
      self.age = age
def bark(self):
  """Let the dog bark"""
  print('WOF!')
print(help(Dog))

def increment(n: int) -> int:
    return n + 1
count: int = 0

try:
     result = 2 / 0
except ZeroDivisionError:
       print('Cannot dvide by zero!')
finally:
    result = 1
print(result) #1

try:
    raise Exception('An error!')
except Exception as error:
    print(error)

class DogNotFoundException(Exception):
    pass
try:
  raise DogNotFoundException()
except DogNotFoundException:
    print('Dog not found!')
class DogNotFoundException(Exception):
  print("inside")
  pass
try:
  raise DogNotFoundException()
except DogNotFoundException:
    print('Dog not found!')

number = [1, 2, 3, 4, 5]
numbers_power_2 = [n**2 for n in numbers]
print(numbers_power_2)
numbers_power_2 = []
for n in numbers:
  numbers_power_2.append(n**2)
numbers_power_2 = list(map(lambda n : n**2, numbers))

class Dog:
  def eat(self):
      print('Eating dog food')
class Cat:
  def eat(self):
      print('Eating cat food')
animal1 = Dog()
animal2 = Cat()
animal1.eat()
animal2.eat()

class Dog:
  # the Dog class
  def __init__(self, name, age):
      self.name = name
      self.age = age
  def __gt__(self, other):
      return True if self.age > other.age else False
roger = Dog('Roger', 8)
shweta = Dog('shweta', 7)
print(roger > shweta)
class Dog:
  # the Dog class
  def __init__(self, name, age):
      self.name = name
      self.age = age
  def __gt__(self, other):
      return True if self.age > other.age else False
roger = Dog('Roger', 8)
shweta = Dog('shweta', 9)
print(roger > shweta)